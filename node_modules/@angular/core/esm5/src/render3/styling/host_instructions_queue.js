import { DEFAULT_TEMPLATE_DIRECTIVE_INDEX } from '../styling/shared';
/*
 * This file contains the logic to defer all hostBindings-related styling code to run
 * at a later point, instead of immediately (as is the case with how template-level
 * styling instructions are run).
 *
 * Certain styling instructions, present within directives, components and sub-classed
 * directives, are evaluated at different points (depending on priority) and will therefore
 * not be applied to the styling context of an element immediately. They are instead
 * designed to be applied just before styling is applied to an element.
 *
 * (The priority for when certain host-related styling operations are executed is discussed
 * more within `interfaces/styling.ts`.)
 */
export function registerHostDirective(context, directiveIndex) {
    var buffer = context[8 /* HostInstructionsQueue */];
    if (!buffer) {
        buffer = context[8 /* HostInstructionsQueue */] = [DEFAULT_TEMPLATE_DIRECTIVE_INDEX];
    }
    buffer[0 /* LastRegisteredDirectiveIndexPosition */] = directiveIndex;
}
/**
 * Queues a styling instruction to be run just before `renderStyling()` is executed.
 */
export function enqueueHostInstruction(context, priority, instructionFn, instructionFnArgs) {
    var buffer = context[8 /* HostInstructionsQueue */];
    var index = findNextInsertionIndex(buffer, priority);
    buffer.splice(index, 0, priority, instructionFn, instructionFnArgs);
}
/**
 * Figures out where exactly to to insert the next host instruction queue entry.
 */
function findNextInsertionIndex(buffer, priority) {
    for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {
        var p = buffer[i + 0 /* DirectiveIndexOffset */];
        if (p > priority) {
            return i;
        }
    }
    return buffer.length;
}
/**
 * Iterates through the host instructions queue (if present within the provided
 * context) and executes each queued instruction entry.
 */
export function flushQueue(context) {
    var buffer = context[8 /* HostInstructionsQueue */];
    if (buffer) {
        for (var i = 1 /* ValuesStartPosition */; i < buffer.length; i += 3 /* Size */) {
            var fn = buffer[i + 1 /* InstructionFnOffset */];
            var args = buffer[i + 2 /* ParamsOffset */];
            fn.apply(this, args);
        }
        buffer.length = 1 /* ValuesStartPosition */;
    }
}
/**
 * Determines whether or not to allow the host instructions queue to be flushed or not.
 *
 * Because the hostBindings function code is unaware of the presence of other host bindings
 * (as well as the template function) then styling is evaluated multiple times per element.
 * To prevent style and class values from being applied to the element multiple times, a
 * flush is only allowed when the last directive (the directive that was registered into
 * the styling context) attempts to render its styling.
 */
export function allowFlush(context, directiveIndex) {
    var buffer = context[8 /* HostInstructionsQueue */];
    if (buffer) {
        return buffer[0 /* LastRegisteredDirectiveIndexPosition */] ===
            directiveIndex;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdF9pbnN0cnVjdGlvbnNfcXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9yZW5kZXIzL3N0eWxpbmcvaG9zdF9pbnN0cnVjdGlvbnNfcXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFDLGdDQUFnQyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFbkU7Ozs7Ozs7Ozs7OztHQVlHO0FBRUgsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQXVCLEVBQUUsY0FBc0I7SUFDbkYsSUFBSSxNQUFNLEdBQUcsT0FBTywrQkFBb0MsQ0FBQztJQUN6RCxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsTUFBTSxHQUFHLE9BQU8sK0JBQW9DLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0tBQzNGO0lBQ0QsTUFBTSw4Q0FBaUUsR0FBRyxjQUFjLENBQUM7QUFDM0YsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUNsQyxPQUF1QixFQUFFLFFBQWdCLEVBQUUsYUFBZ0IsRUFBRSxpQkFBOEI7SUFDN0YsSUFBTSxNQUFNLEdBQTBCLE9BQU8sK0JBQXNDLENBQUM7SUFDcEYsSUFBTSxLQUFLLEdBQUcsc0JBQXNCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxzQkFBc0IsQ0FBQyxNQUE2QixFQUFFLFFBQWdCO0lBQzdFLEtBQUssSUFBSSxDQUFDLDhCQUFpRCxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUN6RSxDQUFDLGdCQUFtQyxFQUFFO1FBQ3pDLElBQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLCtCQUFrRCxDQUFXLENBQUM7UUFDaEYsSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7S0FDRjtJQUNELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUN2QixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxPQUF1QjtJQUNoRCxJQUFNLE1BQU0sR0FBRyxPQUFPLCtCQUFvQyxDQUFDO0lBQzNELElBQUksTUFBTSxFQUFFO1FBQ1YsS0FBSyxJQUFJLENBQUMsOEJBQWlELEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQ3pFLENBQUMsZ0JBQW1DLEVBQUU7WUFDekMsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsOEJBQWlELENBQWEsQ0FBQztZQUNsRixJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyx1QkFBMEMsQ0FBVSxDQUFDO1lBQzFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsTUFBTSxDQUFDLE1BQU0sOEJBQWlELENBQUM7S0FDaEU7QUFDSCxDQUFDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQXVCLEVBQUUsY0FBc0I7SUFDeEUsSUFBTSxNQUFNLEdBQUcsT0FBTywrQkFBb0MsQ0FBQztJQUMzRCxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sTUFBTSw4Q0FBaUU7WUFDMUUsY0FBYyxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIEBsaWNlbnNlXG4qIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuKlxuKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4qL1xuaW1wb3J0IHtIb3N0SW5zdHJ1Y3Rpb25zUXVldWUsIEhvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4LCBTdHlsaW5nQ29udGV4dCwgU3R5bGluZ0luZGV4fSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0eWxpbmcnO1xuaW1wb3J0IHtERUZBVUxUX1RFTVBMQVRFX0RJUkVDVElWRV9JTkRFWH0gZnJvbSAnLi4vc3R5bGluZy9zaGFyZWQnO1xuXG4vKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBsb2dpYyB0byBkZWZlciBhbGwgaG9zdEJpbmRpbmdzLXJlbGF0ZWQgc3R5bGluZyBjb2RlIHRvIHJ1blxuICogYXQgYSBsYXRlciBwb2ludCwgaW5zdGVhZCBvZiBpbW1lZGlhdGVseSAoYXMgaXMgdGhlIGNhc2Ugd2l0aCBob3cgdGVtcGxhdGUtbGV2ZWxcbiAqIHN0eWxpbmcgaW5zdHJ1Y3Rpb25zIGFyZSBydW4pLlxuICpcbiAqIENlcnRhaW4gc3R5bGluZyBpbnN0cnVjdGlvbnMsIHByZXNlbnQgd2l0aGluIGRpcmVjdGl2ZXMsIGNvbXBvbmVudHMgYW5kIHN1Yi1jbGFzc2VkXG4gKiBkaXJlY3RpdmVzLCBhcmUgZXZhbHVhdGVkIGF0IGRpZmZlcmVudCBwb2ludHMgKGRlcGVuZGluZyBvbiBwcmlvcml0eSkgYW5kIHdpbGwgdGhlcmVmb3JlXG4gKiBub3QgYmUgYXBwbGllZCB0byB0aGUgc3R5bGluZyBjb250ZXh0IG9mIGFuIGVsZW1lbnQgaW1tZWRpYXRlbHkuIFRoZXkgYXJlIGluc3RlYWRcbiAqIGRlc2lnbmVkIHRvIGJlIGFwcGxpZWQganVzdCBiZWZvcmUgc3R5bGluZyBpcyBhcHBsaWVkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogKFRoZSBwcmlvcml0eSBmb3Igd2hlbiBjZXJ0YWluIGhvc3QtcmVsYXRlZCBzdHlsaW5nIG9wZXJhdGlvbnMgYXJlIGV4ZWN1dGVkIGlzIGRpc2N1c3NlZFxuICogbW9yZSB3aXRoaW4gYGludGVyZmFjZXMvc3R5bGluZy50c2AuKVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckhvc3REaXJlY3RpdmUoY29udGV4dDogU3R5bGluZ0NvbnRleHQsIGRpcmVjdGl2ZUluZGV4OiBudW1iZXIpIHtcbiAgbGV0IGJ1ZmZlciA9IGNvbnRleHRbU3R5bGluZ0luZGV4Lkhvc3RJbnN0cnVjdGlvbnNRdWV1ZV07XG4gIGlmICghYnVmZmVyKSB7XG4gICAgYnVmZmVyID0gY29udGV4dFtTdHlsaW5nSW5kZXguSG9zdEluc3RydWN0aW9uc1F1ZXVlXSA9IFtERUZBVUxUX1RFTVBMQVRFX0RJUkVDVElWRV9JTkRFWF07XG4gIH1cbiAgYnVmZmVyW0hvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4Lkxhc3RSZWdpc3RlcmVkRGlyZWN0aXZlSW5kZXhQb3NpdGlvbl0gPSBkaXJlY3RpdmVJbmRleDtcbn1cblxuLyoqXG4gKiBRdWV1ZXMgYSBzdHlsaW5nIGluc3RydWN0aW9uIHRvIGJlIHJ1biBqdXN0IGJlZm9yZSBgcmVuZGVyU3R5bGluZygpYCBpcyBleGVjdXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVucXVldWVIb3N0SW5zdHJ1Y3Rpb248VCBleHRlbmRzIEZ1bmN0aW9uPihcbiAgICBjb250ZXh0OiBTdHlsaW5nQ29udGV4dCwgcHJpb3JpdHk6IG51bWJlciwgaW5zdHJ1Y3Rpb25GbjogVCwgaW5zdHJ1Y3Rpb25GbkFyZ3M6IFBhcmFtc09mPFQ+KSB7XG4gIGNvbnN0IGJ1ZmZlcjogSG9zdEluc3RydWN0aW9uc1F1ZXVlID0gY29udGV4dFtTdHlsaW5nSW5kZXguSG9zdEluc3RydWN0aW9uc1F1ZXVlXSAhO1xuICBjb25zdCBpbmRleCA9IGZpbmROZXh0SW5zZXJ0aW9uSW5kZXgoYnVmZmVyLCBwcmlvcml0eSk7XG4gIGJ1ZmZlci5zcGxpY2UoaW5kZXgsIDAsIHByaW9yaXR5LCBpbnN0cnVjdGlvbkZuLCBpbnN0cnVjdGlvbkZuQXJncyk7XG59XG5cbi8qKlxuICogRmlndXJlcyBvdXQgd2hlcmUgZXhhY3RseSB0byB0byBpbnNlcnQgdGhlIG5leHQgaG9zdCBpbnN0cnVjdGlvbiBxdWV1ZSBlbnRyeS5cbiAqL1xuZnVuY3Rpb24gZmluZE5leHRJbnNlcnRpb25JbmRleChidWZmZXI6IEhvc3RJbnN0cnVjdGlvbnNRdWV1ZSwgcHJpb3JpdHk6IG51bWJlcik6IG51bWJlciB7XG4gIGZvciAobGV0IGkgPSBIb3N0SW5zdHJ1Y3Rpb25zUXVldWVJbmRleC5WYWx1ZXNTdGFydFBvc2l0aW9uOyBpIDwgYnVmZmVyLmxlbmd0aDtcbiAgICAgICBpICs9IEhvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4LlNpemUpIHtcbiAgICBjb25zdCBwID0gYnVmZmVyW2kgKyBIb3N0SW5zdHJ1Y3Rpb25zUXVldWVJbmRleC5EaXJlY3RpdmVJbmRleE9mZnNldF0gYXMgbnVtYmVyO1xuICAgIGlmIChwID4gcHJpb3JpdHkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmZmVyLmxlbmd0aDtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBob3N0IGluc3RydWN0aW9ucyBxdWV1ZSAoaWYgcHJlc2VudCB3aXRoaW4gdGhlIHByb3ZpZGVkXG4gKiBjb250ZXh0KSBhbmQgZXhlY3V0ZXMgZWFjaCBxdWV1ZWQgaW5zdHJ1Y3Rpb24gZW50cnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaFF1ZXVlKGNvbnRleHQ6IFN0eWxpbmdDb250ZXh0KTogdm9pZCB7XG4gIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHRbU3R5bGluZ0luZGV4Lkhvc3RJbnN0cnVjdGlvbnNRdWV1ZV07XG4gIGlmIChidWZmZXIpIHtcbiAgICBmb3IgKGxldCBpID0gSG9zdEluc3RydWN0aW9uc1F1ZXVlSW5kZXguVmFsdWVzU3RhcnRQb3NpdGlvbjsgaSA8IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICBpICs9IEhvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4LlNpemUpIHtcbiAgICAgIGNvbnN0IGZuID0gYnVmZmVyW2kgKyBIb3N0SW5zdHJ1Y3Rpb25zUXVldWVJbmRleC5JbnN0cnVjdGlvbkZuT2Zmc2V0XSBhcyBGdW5jdGlvbjtcbiAgICAgIGNvbnN0IGFyZ3MgPSBidWZmZXJbaSArIEhvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4LlBhcmFtc09mZnNldF0gYXMgYW55W107XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgYnVmZmVyLmxlbmd0aCA9IEhvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4LlZhbHVlc1N0YXJ0UG9zaXRpb247XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGFsbG93IHRoZSBob3N0IGluc3RydWN0aW9ucyBxdWV1ZSB0byBiZSBmbHVzaGVkIG9yIG5vdC5cbiAqXG4gKiBCZWNhdXNlIHRoZSBob3N0QmluZGluZ3MgZnVuY3Rpb24gY29kZSBpcyB1bmF3YXJlIG9mIHRoZSBwcmVzZW5jZSBvZiBvdGhlciBob3N0IGJpbmRpbmdzXG4gKiAoYXMgd2VsbCBhcyB0aGUgdGVtcGxhdGUgZnVuY3Rpb24pIHRoZW4gc3R5bGluZyBpcyBldmFsdWF0ZWQgbXVsdGlwbGUgdGltZXMgcGVyIGVsZW1lbnQuXG4gKiBUbyBwcmV2ZW50IHN0eWxlIGFuZCBjbGFzcyB2YWx1ZXMgZnJvbSBiZWluZyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IG11bHRpcGxlIHRpbWVzLCBhXG4gKiBmbHVzaCBpcyBvbmx5IGFsbG93ZWQgd2hlbiB0aGUgbGFzdCBkaXJlY3RpdmUgKHRoZSBkaXJlY3RpdmUgdGhhdCB3YXMgcmVnaXN0ZXJlZCBpbnRvXG4gKiB0aGUgc3R5bGluZyBjb250ZXh0KSBhdHRlbXB0cyB0byByZW5kZXIgaXRzIHN0eWxpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd0ZsdXNoKGNvbnRleHQ6IFN0eWxpbmdDb250ZXh0LCBkaXJlY3RpdmVJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gIGNvbnN0IGJ1ZmZlciA9IGNvbnRleHRbU3R5bGluZ0luZGV4Lkhvc3RJbnN0cnVjdGlvbnNRdWV1ZV07XG4gIGlmIChidWZmZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyW0hvc3RJbnN0cnVjdGlvbnNRdWV1ZUluZGV4Lkxhc3RSZWdpc3RlcmVkRGlyZWN0aXZlSW5kZXhQb3NpdGlvbl0gPT09XG4gICAgICAgIGRpcmVjdGl2ZUluZGV4O1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEluZmVycyB0aGUgcGFyYW1ldGVycyBvZiBhIGdpdmVuIGZ1bmN0aW9uIGludG8gYSB0eXBlZCBhcnJheS5cbiAqL1xuZXhwb3J0IHR5cGUgUGFyYW1zT2Y8VD4gPSBUIGV4dGVuZHMoLi4uYXJnczogaW5mZXIgVCkgPT4gYW55ID8gVCA6IG5ldmVyO1xuIl19